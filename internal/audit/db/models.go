// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package auditdb

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeASSET     AccountType = "ASSET"
	AccountTypeLIABILITY AccountType = "LIABILITY"
	AccountTypeEQUITY    AccountType = "EQUITY"
	AccountTypeREVENUE   AccountType = "REVENUE"
	AccountTypeEXPENSE   AccountType = "EXPENSE"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type JournalStatus string

const (
	JournalStatusPOSTED JournalStatus = "POSTED"
	JournalStatusVOID   JournalStatus = "VOID"
)

func (e *JournalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JournalStatus(s)
	case string:
		*e = JournalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for JournalStatus: %T", src)
	}
	return nil
}

type NullJournalStatus struct {
	JournalStatus JournalStatus `json:"journal_status"`
	Valid         bool          `json:"valid"` // Valid is true if JournalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJournalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.JournalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JournalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJournalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JournalStatus), nil
}

type PeriodStatus string

const (
	PeriodStatusOPEN   PeriodStatus = "OPEN"
	PeriodStatusCLOSED PeriodStatus = "CLOSED"
	PeriodStatusLOCKED PeriodStatus = "LOCKED"
)

func (e *PeriodStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PeriodStatus(s)
	case string:
		*e = PeriodStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PeriodStatus: %T", src)
	}
	return nil
}

type NullPeriodStatus struct {
	PeriodStatus PeriodStatus `json:"period_status"`
	Valid        bool         `json:"valid"` // Valid is true if PeriodStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPeriodStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PeriodStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PeriodStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPeriodStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PeriodStatus), nil
}

type Account struct {
	ID        int64              `json:"id"`
	Code      string             `json:"code"`
	Name      string             `json:"name"`
	Type      AccountType        `json:"type"`
	ParentID  pgtype.Int8        `json:"parent_id"`
	IsActive  bool               `json:"is_active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type AccountMapping struct {
	ID        int64              `json:"id"`
	Module    string             `json:"module"`
	Key       string             `json:"key"`
	AccountID int64              `json:"account_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type ApInvoice struct {
	ID         int64              `json:"id"`
	Number     string             `json:"number"`
	SupplierID int32              `json:"supplier_id"`
	GrnID      pgtype.Int8        `json:"grn_id"`
	Currency   string             `json:"currency"`
	Total      pgtype.Numeric     `json:"total"`
	Status     string             `json:"status"`
	IssuedAt   pgtype.Date        `json:"issued_at"`
	DueAt      pgtype.Date        `json:"due_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type ApPayment struct {
	ID          int64          `json:"id"`
	Number      string         `json:"number"`
	ApInvoiceID int64          `json:"ap_invoice_id"`
	Amount      pgtype.Numeric `json:"amount"`
	PaidAt      pgtype.Date    `json:"paid_at"`
	Method      string         `json:"method"`
	Note        string         `json:"note"`
}

type Approval struct {
	ID      int64              `json:"id"`
	Module  string             `json:"module"`
	RefID   pgtype.UUID        `json:"ref_id"`
	ActorID int64              `json:"actor_id"`
	Action  string             `json:"action"`
	Note    string             `json:"note"`
	At      pgtype.Timestamptz `json:"at"`
}

type AuditLog struct {
	ID         int64              `json:"id"`
	ActorID    int64              `json:"actor_id"`
	Action     string             `json:"action"`
	Entity     string             `json:"entity"`
	EntityID   string             `json:"entity_id"`
	Meta       []byte             `json:"meta"`
	OccurredAt pgtype.Timestamptz `json:"occurred_at"`
}

type Branch struct {
	ID        int32  `json:"id"`
	CompanyID int32  `json:"company_id"`
	Code      string `json:"code"`
	Name      string `json:"name"`
	Address   string `json:"address"`
}

type Category struct {
	ID       int32       `json:"id"`
	Code     string      `json:"code"`
	Name     string      `json:"name"`
	ParentID pgtype.Int4 `json:"parent_id"`
}

type Company struct {
	ID        int32              `json:"id"`
	Code      string             `json:"code"`
	Name      string             `json:"name"`
	Address   string             `json:"address"`
	TaxID     string             `json:"tax_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Customer struct {
	ID       int32  `json:"id"`
	Code     string `json:"code"`
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Email    string `json:"email"`
	Address  string `json:"address"`
	IsActive bool   `json:"is_active"`
}

type GlBalance struct {
	AccountID int64       `json:"account_id"`
	PeriodID  int64       `json:"period_id"`
	Opening   interface{} `json:"opening"`
	Debit     interface{} `json:"debit"`
	Credit    interface{} `json:"credit"`
	Closing   interface{} `json:"closing"`
}

type Grn struct {
	ID          int64              `json:"id"`
	Number      string             `json:"number"`
	PoID        pgtype.Int8        `json:"po_id"`
	SupplierID  int32              `json:"supplier_id"`
	WarehouseID int32              `json:"warehouse_id"`
	Status      string             `json:"status"`
	ReceivedAt  pgtype.Timestamptz `json:"received_at"`
	Note        string             `json:"note"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type GrnLine struct {
	ID        int64          `json:"id"`
	GrnID     int64          `json:"grn_id"`
	ProductID int32          `json:"product_id"`
	Qty       pgtype.Numeric `json:"qty"`
	UnitCost  pgtype.Numeric `json:"unit_cost"`
}

type IdempotencyKey struct {
	Key       string             `json:"key"`
	Module    string             `json:"module"`
	RefID     pgtype.UUID        `json:"ref_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type InventoryBalance struct {
	WarehouseID int32              `json:"warehouse_id"`
	ProductID   int32              `json:"product_id"`
	Qty         pgtype.Numeric     `json:"qty"`
	AvgCost     pgtype.Numeric     `json:"avg_cost"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type InventoryCard struct {
	ID          int64              `json:"id"`
	WarehouseID int32              `json:"warehouse_id"`
	ProductID   int32              `json:"product_id"`
	TxID        int64              `json:"tx_id"`
	TxCode      string             `json:"tx_code"`
	TxType      string             `json:"tx_type"`
	QtyIn       pgtype.Numeric     `json:"qty_in"`
	QtyOut      pgtype.Numeric     `json:"qty_out"`
	BalanceQty  pgtype.Numeric     `json:"balance_qty"`
	UnitCost    pgtype.Numeric     `json:"unit_cost"`
	BalanceCost pgtype.Numeric     `json:"balance_cost"`
	PostedAt    pgtype.Timestamptz `json:"posted_at"`
	Note        string             `json:"note"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type InventoryTx struct {
	ID          int64              `json:"id"`
	Code        string             `json:"code"`
	TxType      string             `json:"tx_type"`
	WarehouseID pgtype.Int4        `json:"warehouse_id"`
	RefModule   string             `json:"ref_module"`
	RefID       pgtype.UUID        `json:"ref_id"`
	Note        string             `json:"note"`
	PostedAt    pgtype.Timestamptz `json:"posted_at"`
	CreatedBy   pgtype.Int8        `json:"created_by"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type InventoryTxLine struct {
	ID             int64          `json:"id"`
	TxID           int64          `json:"tx_id"`
	ProductID      int32          `json:"product_id"`
	Qty            pgtype.Numeric `json:"qty"`
	UnitCost       pgtype.Numeric `json:"unit_cost"`
	Amount         pgtype.Numeric `json:"amount"`
	SrcWarehouseID pgtype.Int4    `json:"src_warehouse_id"`
	DstWarehouseID pgtype.Int4    `json:"dst_warehouse_id"`
}

type JournalEntry struct {
	ID           int64              `json:"id"`
	Number       int64              `json:"number"`
	PeriodID     int64              `json:"period_id"`
	Date         pgtype.Date        `json:"date"`
	SourceModule string             `json:"source_module"`
	SourceID     pgtype.UUID        `json:"source_id"`
	Memo         pgtype.Text        `json:"memo"`
	PostedBy     pgtype.Int8        `json:"posted_by"`
	PostedAt     pgtype.Timestamptz `json:"posted_at"`
	Status       JournalStatus      `json:"status"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type JournalLine struct {
	ID             int64              `json:"id"`
	JeID           int64              `json:"je_id"`
	AccountID      int64              `json:"account_id"`
	Debit          pgtype.Numeric     `json:"debit"`
	Credit         pgtype.Numeric     `json:"credit"`
	DimCompanyID   pgtype.Int8        `json:"dim_company_id"`
	DimBranchID    pgtype.Int8        `json:"dim_branch_id"`
	DimWarehouseID pgtype.Int8        `json:"dim_warehouse_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type MvApAging struct {
	Bucket    string      `json:"bucket"`
	CompanyID int64       `json:"company_id"`
	BranchID  int64       `json:"branch_id"`
	AsOf      interface{} `json:"as_of"`
	Amount    int64       `json:"amount"`
}

type MvArAging struct {
	Bucket    string      `json:"bucket"`
	CompanyID int64       `json:"company_id"`
	BranchID  int64       `json:"branch_id"`
	AsOf      interface{} `json:"as_of"`
	Amount    int64       `json:"amount"`
}

type MvCashflowMonthly struct {
	Period    string `json:"period"`
	CompanyID int64  `json:"company_id"`
	BranchID  int64  `json:"branch_id"`
	CashIn    int64  `json:"cash_in"`
	CashOut   int64  `json:"cash_out"`
}

type MvPlMonthly struct {
	Period    string `json:"period"`
	CompanyID int64  `json:"company_id"`
	BranchID  int64  `json:"branch_id"`
	Revenue   int64  `json:"revenue"`
	Cogs      int64  `json:"cogs"`
	Opex      int64  `json:"opex"`
	Net       int32  `json:"net"`
}

type Period struct {
	ID        int64              `json:"id"`
	Code      string             `json:"code"`
	StartDate pgtype.Date        `json:"start_date"`
	EndDate   pgtype.Date        `json:"end_date"`
	Status    PeriodStatus       `json:"status"`
	ClosedAt  pgtype.Timestamptz `json:"closed_at"`
	LockedBy  pgtype.Int8        `json:"locked_by"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Permission struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Po struct {
	ID           int64              `json:"id"`
	Number       string             `json:"number"`
	SupplierID   int32              `json:"supplier_id"`
	Status       string             `json:"status"`
	Currency     string             `json:"currency"`
	ExpectedDate pgtype.Date        `json:"expected_date"`
	Note         string             `json:"note"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	ApprovedBy   pgtype.Int8        `json:"approved_by"`
	ApprovedAt   pgtype.Timestamptz `json:"approved_at"`
}

type PoLine struct {
	ID        int64          `json:"id"`
	PoID      int64          `json:"po_id"`
	ProductID int32          `json:"product_id"`
	Qty       pgtype.Numeric `json:"qty"`
	Price     pgtype.Numeric `json:"price"`
	TaxID     pgtype.Int4    `json:"tax_id"`
	Note      string         `json:"note"`
}

type Pr struct {
	ID         int64              `json:"id"`
	Number     string             `json:"number"`
	SupplierID pgtype.Int4        `json:"supplier_id"`
	RequestBy  int64              `json:"request_by"`
	Status     string             `json:"status"`
	Note       string             `json:"note"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type PrLine struct {
	ID        int64          `json:"id"`
	PrID      int64          `json:"pr_id"`
	ProductID int32          `json:"product_id"`
	Qty       pgtype.Numeric `json:"qty"`
	Note      string         `json:"note"`
}

type Product struct {
	ID         int32              `json:"id"`
	Sku        string             `json:"sku"`
	Name       string             `json:"name"`
	CategoryID int32              `json:"category_id"`
	UnitID     int32              `json:"unit_id"`
	Price      pgtype.Numeric     `json:"price"`
	TaxID      pgtype.Int4        `json:"tax_id"`
	IsActive   bool               `json:"is_active"`
	DeletedAt  pgtype.Timestamptz `json:"deleted_at"`
}

type Role struct {
	ID          int64              `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type RolePermission struct {
	RoleID       int64              `json:"role_id"`
	PermissionID int64              `json:"permission_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Session struct {
	ID        string             `json:"id"`
	UserID    int64              `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	Ip        pgtype.Text        `json:"ip"`
	Ua        pgtype.Text        `json:"ua"`
}

type SourceLink struct {
	ID        int64              `json:"id"`
	Module    string             `json:"module"`
	RefID     pgtype.UUID        `json:"ref_id"`
	JeID      int64              `json:"je_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Supplier struct {
	ID       int32  `json:"id"`
	Code     string `json:"code"`
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Email    string `json:"email"`
	Address  string `json:"address"`
	IsActive bool   `json:"is_active"`
}

type Tax struct {
	ID   int32          `json:"id"`
	Code string         `json:"code"`
	Name string         `json:"name"`
	Rate pgtype.Numeric `json:"rate"`
}

type Unit struct {
	ID   int32  `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

type User struct {
	ID           int64              `json:"id"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	IsActive     bool               `json:"is_active"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type UserRole struct {
	UserID    int64              `json:"user_id"`
	RoleID    int64              `json:"role_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Warehouse struct {
	ID       int32  `json:"id"`
	BranchID int32  `json:"branch_id"`
	Code     string `json:"code"`
	Name     string `json:"name"`
	Address  string `json:"address"`
}
