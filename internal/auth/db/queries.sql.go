// Code generated by sqlc v1.24.0 (manually authored). DO NOT EDIT.
package authdb

import (
    "context"

    "github.com/jackc/pgx/v5"
    "github.com/jackc/pgx/v5/pgconn"
    "github.com/jackc/pgx/v5/pgxpool"
)

// DBTX matches sqlc's pgx interface.
type DBTX interface {
    Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
    QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
}

// Queries wraps generated query methods.
type Queries struct {
    db DBTX
}

// New creates a new Queries.
func New(db DBTX) *Queries {
    return &Queries{db: db}
}

// WithTx attaches a transaction.
func (q *Queries) WithTx(tx pgx.Tx) *Queries {
    return &Queries{db: tx}
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, is_active, created_at, updated_at
FROM users
WHERE email = $1`

// GetUserByEmail retrieves a user by email.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
    row := q.db.QueryRow(ctx, getUserByEmail, email)
    var i User
    err := row.Scan(&i.ID, &i.Email, &i.PasswordHash, &i.IsActive, &i.CreatedAt, &i.UpdatedAt)
    return i, err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, user_id, created_at, expires_at, ip, ua)
VALUES ($1, $2, $3, $4, $5, $6)`

// CreateSession inserts a session row.
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
    _, err := q.db.Exec(ctx, createSession, arg.ID, arg.UserID, arg.CreatedAt, arg.ExpiresAt, arg.Ip, arg.Ua)
    return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1`

// DeleteSession removes a session row.
func (q *Queries) DeleteSession(ctx context.Context, id string) error {
    _, err := q.db.Exec(ctx, deleteSession, id)
    return err
}

var _ DBTX = (*pgxpool.Pool)(nil)
